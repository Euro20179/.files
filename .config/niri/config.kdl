spawn-sh-at-startup "$HOME/.config/wlinit"

cursor {
    xcursor-theme "ArcStarry-cursors"
    xcursor-size 24

    hide-when-typing
}

hotkey-overlay {
    skip-at-startup
}

workspace "1st" {
    open-on-output "DP-1"
}
workspace "2nd" {
    open-on-output "DP-1"
}
workspace "3rd" {
    open-on-output "DP-1"
}

workspace "email" {
    open-on-output "DP-1"
}

workspace "chat" {
    open-on-output "HDMI-A-1"
}

workspace "O-2nd" {
    open-on-output "HDMI-A-1"
}

//out of the way
workspace "ootw" {
    open-on-output "HDMI-A-1"
}

window-rule {
    match app-id="nvim-float"
    open-floating true
}

window-rule {
    match app-id=r#"thunderbird"#    
    open-maximized true
    open-on-workspace "email"
}

window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
}

window-rule {
    match app-id="swiv"
    open-floating true
}

window-rule {
    match app-id="goker"
    open-floating true
}

window-rule {
    match app-id=r#"osu!"#
    open-fullscreen true
}

input {
    keyboard {
        repeat-rate 75
        repeat-delay 250
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    focus-follows-mouse
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "DP-1" {

    mode "1920x1080@165.003"
    focus-at-startup

    scale 1

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    position x=0 y=0
}

output "DP-2" {
    off
    position x=3840 y=0
}
output "HDMI-A-1" {
    mode "1920x1080@74.986"
    position x=1920 y=0
}


layout {
    gaps 4

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    default-column-width { proportion 0.5; }

    preset-column-widths {
        proportion 0.5;
        proportion 0.9;
    }

    always-center-single-column


    focus-ring {
        // Uncomment this line to disable the focus ring.
        // off

        // How many logical pixels the ring extends out from the windows.
        width 2


        // Color of the ring on the active monitor.
        active-color "#7fc8ff"

        // Color of the ring on inactive monitors.
        inactive-color "#505050"


    }

    border {
        off

        width 4
        active-color "#ffc87f"
        inactive-color "#505050"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

prefer-no-csd

screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"


animations {
    // window-open {
    //     custom-shader r"
    //         vec4 open_color(vec3 coords_curr_geo, vec3 size_curr_geo) {
    //             vec3 coords_tex = niri_geo_to_tex * coords_geo;
    //             return texture2D(niri_tex, coords_tex.st);
    //         }
    //     "
    // }
}

binds {

    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Escape { toggle-keyboard-shortcuts-inhibit; }

    //programs {{{
    Mod+Return { spawn "foot"; }
    Mod+T { spawn "sh" "-c" "$BROWSER"; }
    Mod+Shift+T { spawn "sh" "-c" "$BROWSER_LITE"; }
    Mod+Shift+E { spawn-sh "$EMAIL"; }
    Mod+E { spawn-sh "$MATRIX"; }
    Mod+Alt+T { spawn "sh" "-c" "_BROWSER_NO_PRIVACY"; }
    Mod+Z { spawn "sh" "-c" "$TERMINAL -e $SYSMON"; }
    Mod+Semicolon { spawn "pick-emoji"; }
    Mod+Shift+Semicolon { spawn "pick-reaction-image"; }

    Mod+p { spawn-sh "clr=$(hyprpicker -n) && [ \"$clr\" ] && $TERMINAL -a goker goker \"${clr}\""; }

    Mod+X { spawn "cp-pass"; }
    Mod+Shift+X { spawn "cp-pass" "otp"; }

    Mod+I { spawn-sh "foot -a nvim-float nvim -S $HOME/.local/vim-scripts/clipedit.vim"; }
    Mod+Shift+I { spawn-sh "foot -a nvim-float nvim-calc"; }
    // }}}

    Mod+B { spawn-sh "wlr-which-key -k b"; }
    Mod+G { spawn-sh "wlr-which-key -k g"; }

    Mod+R { spawn "os-menu"; }
    Mod+Comma { spawn "select-window"; }
    Mod+Alt+Semicolon { spawn "lock"; }

    Mod+Space { toggle-window-floating; }
    Mod+Shift+Space { switch-focus-between-floating-and-tiling; }

    // You can also use a shell. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument in the end.
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioLowerVolume allow-when-locked=true { spawn "sh" "-c" "wpctl set-volume \"@DEFAULT_AUDIO_SINK@\" 5%- && send-volume-notif lower"; }
    XF86AudioRaiseVolume allow-when-locked=true { spawn "sh" "-c" "wpctl set-volume \"@DEFAULT_AUDIO_SINK@\" 5%+ && send-volume-notif higher"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }


    Mod+Q { close-window; }

    Mod+H     { focus-column-or-monitor-left; }
    Mod+L     { focus-column-or-monitor-right; }

    Mod+Shift+H     { move-column-left-or-to-monitor-left; }
    Mod+Shift+J     { move-window-down-or-to-workspace-down; }
    Mod+Shift+K     { move-window-up-or-to-workspace-up; }
    Mod+Shift+L     { move-column-right-or-to-monitor-right; }

    Mod+J     { focus-window-or-workspace-down; }
    Mod+K     { focus-window-or-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }

    Mod+Period     { focus-monitor-next; }

    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    Mod+Shift+Period  { move-window-to-monitor-next; }
    Mod+Shift+M  { move-column-to-first; }

    Mod+S              { move-column-to-workspace-down; }
    Mod+W              { move-column-to-workspace-up; }

    Mod+BracketLeft { focus-workspace "1st"; }
    Mod+BracketRight { focus-workspace "2nd"; }
    Mod+Minus { focus-workspace "3rd"; }
    Mod+Equal { focus-workspace "email"; }
    Mod+Backslash { focus-workspace "chat"; }
    Mod+Backspace { focus-workspace "O-2nd"; }
    // Mod+7 { focus-workspace 7; }
    // Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace "ootw"; }
    Mod+Shift+BracketLeft { move-window-to-workspace "1st"; }
    Mod+Shift+BracketRight { move-window-to-workspace "2nd"; }
    Mod+Shift+Minus { move-window-to-workspace "3rd"; }
    // Mod+Shift+Equal { move-column-to-workspace 4; }
    Mod+Shift+Backslash { move-window-to-workspace "chat"; }
    Mod+Shift+Backspace { move-window-to-workspace "O-2nd"; }
    // Mod+Shift+7 { move-column-to-workspace 7; }
    // Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace "ootw"; }



    // Consume one window from the right into the focused column.
    Mod+Shift+Comma  { consume-or-expel-window-right; }
    // Expel one window from the focused column to the right.
    // Mod+Shift+Period { expel-window-from-column; }

    // There are also commands that consume or expel a single window to the side.
    // Mod+BracketLeft  { consume-or-expel-window-left; }
    // Mod+BracketRight { consume-or-expel-window-right; }

    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+A { switch-preset-column-width; }
    Mod+C { center-column; }
    Mod+M { set-column-width "50%"; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Alt+H { set-column-width "-10%"; }
    Mod+Alt+L { set-column-width "+10%"; }
    Mod+Alt+K { set-window-height "-10%"; }
    Mod+Alt+J { set-window-height "+10%"; }

    Print { screenshot-screen; }
    Mod+V { spawn "scr-wayland"; }
    Alt+Print { screenshot-window; }

    Mod+Slash { spawn-sh "wl-copy -c && printf \"\" | rofi -theme cat-macchiato-dmenu-center -dmenu -p \"command\" | bash | wl-copy -n"; }
    Mod+Y { spawn-sh "search < /dev/null > /dev/null 2>&1"; }
    Mod+Apostrophe { spawn-sh "linkding-cli search"; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Alt+Shift+R { quit; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }

    Mod+U { toggle-column-tabbed-display; }
}

gestures {
    hot-corners {
        off
    }
}
