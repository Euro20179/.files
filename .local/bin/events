#!/bin/python

"""
This script parses my calendar file

layed out as such

= Year
== Month
=== Day
- event for the day

Any line not matching one of those patterns is skipped


All dates and events are printed at the end in the form of:
    {event} {Month} {day}
"""
import datetime
import functools
import math
import os
import re
import time
import sys

from collections import defaultdict
from calendar import month_name

calFile = os.environ.get("CALFILE")
if calFile == None:
    print("No $CALFILE")
    exit(1)

with open(calFile, "r") as f:
    text = f.read()


dates: defaultdict[
    str,
    defaultdict[
        str,
        defaultdict[
            int,
            list[str]
        ]
    ]
] = defaultdict(
    functools.partial(
        defaultdict,
        functools.partial(
            defaultdict,
            list
        )
    )
)

curTime = datetime.datetime.now()

curSection = [str(curTime.year), curTime.strftime("%B"), str(curTime.day)]

def parseDate(date: str):
    """
        `date` must be a string of the form [MM/]DD[/YYYY]
    """

    match = re.findall(r"(\d\d/)?(\d\d)(/\d\d\d\d)?", date)
    m, d, y = match[0]

    if m:
        month = int(m.replace("/", ""))
    else:
        try:
            month = time.strptime(curSection[1], "%B").tm_mon
        except Exception:
            month = curTime.month

    if y:
        year = int(y.replace("/", ""))
    else:
        try:
            year = time.strptime(curSection[0], "%Y").tm_year
        except Exception:
            year = curTime.year

    date = datetime.datetime(month=month, year=year, day=int(d))

    return date

def dateRangeToDateList(start: str, end: str) -> list[datetime.datetime]:
    start = parseDate(start)
    end = parseDate(end)

    delta = (end - start).days
    return [start + datetime.timedelta(n) for n in range(delta + 1)]

for line in text.split('\n'):
    line = line.strip()

    if not line:
        continue

    if not line.startswith('=') and not line.startswith("-"):
        continue

    if re.match(r"^=+$", line):
        continue

    dt = None

    if line.startswith("==="):
        dt = 2
    elif line.startswith('=='):
        dt = 1
    elif line.startswith('='):
        dt = 0

    if dt == None or " " not in line:
        #day actually spans a range of dates
        if "->" in curSection[2]:
            start, _, end = curSection[2].split(" ")
            for date in dateRangeToDateList(start, end):
                dates[str(date.year)][date.strftime("%B")][str(date.day)].append(line)
        else:
            dates[curSection[0]][curSection[1]][curSection[2]].append(line)
        continue

    data = line.replace("=", "").strip()

    if dt == 0:
        if not data.isnumeric():
            data = str(curTime.year)

    curSection[dt] = data



if len(sys.argv) > 1:
    fmt = sys.argv[1]
else:
    fmt = "{event} ON {month}/{day}/{year} - {dt} days away"
#Now this is what i call sorting
ms = list(month_name)
for year in sorted(dates, key=int):
    months = dates[year]
    for month in sorted(months, key=ms.index):
        days = months[month]
        for day in sorted(days, key=int):
            for activity in days[day]:
                td = datetime.datetime(year=int(year), month=time.strptime(month, "%B").tm_mon, day=int(day))

                #if the day has passed, dont print it
                if (td - curTime).days < 0:
                    continue

                #the funky dt math is to make it days away rounded up instead of the default rounded down
                print(fmt.format(event=activity, month=month, day=day, year=year, dt=math.ceil((td - curTime).total_seconds() / 86400)))
                # print(activity, year, month, day, (td - curTime).days, "days away")
