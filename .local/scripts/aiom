#!/bin/bash

mksearch() {
    local search=$1
    curl "$AIO_SERVER/api/v1/query-v3" -G --data-urlencode "search=@${search}" | jq -r '"\(.ItemId)\t\(.En_Title)\t\(.Type)\t\(.Location)"'
}

mkselection() {
    local results="$1"
    echo "$results" | fzf -1
}

evallocation() {
    local location="$1"
    eval printf "%s" "\"$location\""
}

#also sets season (if in pos, otherwise "")
getpos() {
    local id=$1
    local rawPos=$(curl "$AIO_SERVER"/api/v1/engagement/get-entry -G --data-urlencode "uid=${AIO_UID}" --data-urlencode "id=${id}" | jq -r '.CurrentPosition')
    pos="$(printf "%s" "$rawPos" | sed -n 's/[^[:digit:]]*\([[:digit:]]\+\).*/\1/p')"
    printf "%d" "$((pos + 1))"
}

getseasonFromPos() {
    local id=$1
    local rawPos=$(curl "$AIO_SERVER"/api/v1/engagement/get-entry -G --data-urlencode "uid=${AIO_UID}" --data-urlencode "id=${id}" | jq -r '.CurrentPosition')
    season="$(printf "%s" "$rawPos" | sed -n 's/.*S\(\([[:alpha:]]\)*[[:digit:]]\+\).*/\1/p')"
    if [ "$season" = "$rawPos" ]; then
        printf ""
    else
        printf "%s" "$season"
    fi
}

updatepos() {
    local newpos=$2
    local id=$1
    curl -H "Authorization: Basic $(printf "%s" "$AIO_ACCOUNT_NUMBER" | base64)" "$AIO_SERVER"/api/v1/engagement/mod-entry"?current-position=${newpos}&id=$id"
}

getsubs() {
    local pos="$1"
    local location="$2"
    printf "%s\n" "Finding subfiles for episode: $pos" >&2
    valid=""
    while read -r file; do
        [ -z "$file" ] && continue
        if [ "$(episode-grabber.py "$file" "${file%/*}")" -eq "$pos" ]; then
            valid=$(printf "%s:%s" "$valid" "$file")
        fi
    done <<<"$(fd -i sub "$location" | xargs -I{} fd . "{}")"
    printf "%s" "${valid#:}"
}

getseason() {
    local location="$1"
    seasons=""
    for file in "$location"/[Ss]eason*; do
        case "$file" in
        *'[Ss]eason*') continue ;;
        esac
        seasons="$(printf '%s\n%s' "$seasons" "${file##*/}")"
    done
    for file in "$location"/[Ss][[:digit:]]*; do
        case "$file" in
        *'[Ss][[:digit:]]*') continue ;;
        esac
        seasons="$(printf '%s\n%s' "$seasons" "${file##*/}")"
    done
    [ "$seasons" ] && printf "%s" "${seasons#$'\n'}" | fzf -1
}

findfile() {
    local location="$1"
    while read -r file; do
        if [ "$(episode-grabber.py "$file" "$location" i)" = "$pos" ]; then
            printf "%s" "$file"
            break
        fi
    done <<<"$(ls "$location")"
}

play() {
    local subs=$1
    local path=$2

    if [ "$subs" ]; then
        mpv --sub-files="${subs}" "$path"
    else
        mpv "$path"
    fi
}

ask_subs=0
season=""
while getopts "sS:" OPT; do
    case "$OPT" in
    s) ask_subs=1 ;;
    S) season=$OPTARG ;;
    *) : ;;
    esac
done
shift $((OPTIND - 1))

search=$*
search="${search// /\\ }"
main() {
    results="$(mksearch "$search")"
    selection="$(mkselection "$results")"

    while :; do
        IFS=$'\t' read -r id name type location <<<"$selection"

        [ -z "$pos" ] && pos=$(getpos "$id")

        location="$(evallocation "$location")"

        [ "$ask_subs" = 1 ] && subsloc=$(getsubs "$pos" "$location")

        #only ask if the season is not set
        [ -z "$season" ] && season=$(getseasonFromPos "$id")
        [ -z "$season" ] && season="$(getseason "$location")"
        [ "$season" ] && location="${location}/${season}"

        case "$type" in
        Show)
            file=$(findfile "$location")
            #if the season is not found then we have probably reached the end of the season, ask again
            [ -z "$file" ] && {
                season="$(getseason "$location")"
                [ "$season" ] && location="${location}/${season}"
            }
            location="${location}/$(findfile "$location")"
            ;;
        esac

        play "$subsloc" "$location"

        read -p $'(n)ext\n(s)top\nstop and (u)pdate\n(p)revious\n(r)esume\n' -r action
        case "$action" in
        n*) pos=$((pos + 1)) ;;
        s*|e*|q*) exit 0 ;;
        u*)
            updatepos "$id" "$pos,%20S${season}"
            exit 0
            ;;
        r*) : ;;
        [[:digit:]]*)
            action="${action%%[![:digit:]]*}"
            pos=$action ;;
        esac

    done
}

main
