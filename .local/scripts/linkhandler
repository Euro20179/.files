#!/bin/bash
#LH_NO_EDIT is used in my nvim config to say, dont edit just exit with an error to let nvim handle the editing

while getopts "e" OPT; do
    case "$OPT" in
        e) LINKHANDLER_EXPAND_ONLY=1 ;;
        *) : ;;
    esac
done

shift "$((OPTIND-1))"

link="$*"
: "${LH_NO_EDIT=0}"
: "${LINKHANDLER_EXPAND_ONLY:-0}"

# EDITOR="$TERMINAL $EDITOR"
#

tty 2> /dev/null 1>&2 && inTerminal=1 || inTerminal=0

open_with_editor() {
    modified_link="$1"

    #If nvim is open and linkhandler was opened from nvim, open in a new tab in the current instance of nvim
    [ "$NVIM" ] && nvim --headless --server "$NVIM" --remote-send ":tabnew $modified_link<CR>" || {
        if [ "${inTerminal}" = 1 ]; then
            "$EDITOR" "$modified_link"
        else
            ${GUIEDITOR} "$modified_link"
        fi
    }
    return 0
}

try_mime_handling() {
    #rev cut rev gets the last field
    mime=$(file --mime-type "$link" | rev | cut -d: -f1 | rev | tr -d ' ')
    case "$mime" in
        application/pdf | application/epub*) zathura "$link" ;;
        image/svg+xml) "$BROWSER" "$link" ;;
        image/*) nsxiv "$link" ;;
        text/html) $BROWSER "$link" ;;
        text/* | plain/*)
            [ $LH_NO_EDIT = 1 ] && exit 1
            open_with_editor "$link" ;;
        video/* | audio/*) mpv "$link" ;;
        application/x-shockwave-flash) flashplayer "$link" ;;
        inode/directory) open_with_editor "$link" ;;
        application/json) 
            notify-send "$inTerminal"
            if [ "$inTerminal" = 1 ]; then
                fx "$link"
            else
                $TERMINAL -e fx "$link"
            fi ;;
        *) return 1 ;;
    esac
    return 0
}

try_custom_uri() {
    case "$link" in
        *.swf) flashplayer "$link" ;;
        *.png | *.jpg | *.jpeg | *.webm | *.gif | *.webm | *.webp) mpv --loop "$link" & ;;
        *.m3u?) mpv "$link" ;;
        *.onion) tor "$link" ;;
        *://cloud://*)
            extra_protocol="${link%%cloud://*}"
            new_link="${extra_protocol}${CLOUD}/${link#*://cloud://}"
            linkhandler "$new_link"
            exit
            ;;
        # steam://*) flatpak run com.valvesoftware.Steam "$link" ;;
        jellyfin:*//*)
            #planned uri
            # jellyfin:[type]//{search}[/s[number][/[number]]]
            # eg: jellyfin://friends/s: will list the seasons of the selected result
            # eg: jellyfin://friends/s10: will play season 10 of the selected result
            # eg: jellyfin://friends/s[eE]5: will play episode 5 of the selected result's season
            # eg: jellyfin://friends/s1[eE]10: will play season 1 episode 10 of the selected result
            type="${link#jellyfin:}"
            type="${type%//*}"

            [ -z "$type" ] && type="Series,Movie,Episode"

            show="${link#jellyfin:*//}"
            args=(--)

            [[ "$show" =~ /s$ ]] && show="${show%/s}" && args=(-os)
            [[ "$show" =~ /s[[:digit:]]*$ ]] && args=(-os -s"${show#*/s}") && show="${show%/*}"
            show="$(printf "%s" "$show" | jq -sRr @uri)"
            aiow -d '\(if .Type != "Series" then "\(.SeriesName) " else "" end)[\(.Type)\(if .Type == "Episode" then
                    " : \(.IndexNumber), S\(.ParentIndexNumber)"
                elif .Type == "Season" then
                    " : S\(.IndexNumber)"
                else
                    ""
                end)] \(.Name)' "${args[@]}" "$show" "IncludeItemTypes=$type"
            ;;
        exe://*) "${link#exe://}" ;;
        media://*) mpv "${link#media://}" ;;
        https://cdn.discordapp.com/attachments/*)
            tmp=$(mktemp)
            curl "$link" >"$tmp"
            linkhandler "$tmp"
            rm "$tmp"
            ;;
        https://github.com/*/blob/*)
            [ "$LH_NO_EDIT" = 1 ] && exit 1
            file_path=${link#*/blob/}
            repo="${link%%/blob/*}"
            repo="${repo#https://github.com/}"
            open_with_editor "https://raw.githubusercontent.com/${repo}/${file_path}"
            ;;
        https://*/watch?v=* | https://youtu.be*) mpv "$link" ;;
        https://* | http://*) nohup "$BROWSER" "$link" >/dev/null 2>&1 & ;;
        gemini://*) ${GEMINI:-kristall} "$link" ;;
        term://*) 
            set -f
            "${TERMINAL}" "${TERMINAL_HOLD_OPT:="-H"}" -e ${link#term://}
            set +f ;;
        man://*|man:*)
            link="${link#man://}"
            link="${link#man:}"
            if [ "$inTerminal" = 1 ]; then
                man "${link}"
            else
                $TERMINAL -e man "${link}"
            fi ;;
        sftp://*|ftp://*|ftps://*)
            [ "$inTerminal" = 1 ] && mpv "$link" || {
                if [ "$inTerminal" = 1 ]; then
                    lftp "$link"
                else
                    $TERMINAL -e lftp "$link"
                fi 
            } ;;
        calc:*)
            ans="$(qalc -t "${link#calc:}")"
            #stolen from d-calc
            case "$XDG_SESSION_TYPE" in
                wayland) wl-copy  -- "$ans" ;;
                X11) xclip -i <<< "$ans" ;;
            esac
            notify-send -- "$ans" ;;
        diary://*)
            entry=${link#diary://}
            baseEntry="${entry%%/*}"
            path="${entry#*/}"
            tmp=$(mktemp -u)
            unzip -d "$tmp" "$DIARY_FILE" "$baseEntry/*"
            linkhandler "$tmp/${entry}"
            rm -r "$tmp"
            ;;
        /* | ~/* | ./*)
            [ "$LH_NO_EDIT" = 1 ] && exit 1
            open_with_editor "$link"
            ;;
        #otherwise, infinite loop
        cloud:*) exit 0 ;;
        =*) open_with_editor "$(which "${link#=}")" ;;
        *) xdg-open "$link" 2>/dev/null || {
            if [[ "$link" =~ :// ]]; then
                "$BROWSER" "$link"
            else
                "$BROWSER" --search "$link"
            fi
        } ;;
    esac
}

#modifies $link
expand_path_uri() {
    local prev="$link"
    case "$link" in
        cloud:*//*)
            extra="${link#cloud:}"
            extra="${extra%%//*}"
            case "$extra" in
                /*) path="${extra#/}://$CLOUD/${link#cloud:*//}" ;;
                :*) path="${extra#:}:$CLOUD/${link#cloud:*//}" ;;
                *) path="$CLOUD/${link#cloud:*//}" ;;
            esac
            link="$path" ;;
        vw:*)
            link="$WIKI/${link#vw:}"
            if [ "${link:$((${#link}-1))}" = '/' ]; then
                for ext in mmfml md norg org html; do
                    if [ -f "$link"index."$ext" ]; then
                        link="$link"index."$ext"
                        break
                    fi
                done
            fi
            ;;
        wiki://*) link="https://wikipedia.org/wiki/${link#wiki://}" ;;

        anime:sftp://*) link="${link#anime:}" ;;&
        sftp://*)
            eval "$(ssh-agent -s)"
            SSH_ASKPASS="$HOME/.local/scripts/ssh-askpass" ssh-add ~/.ssh/id_cloud ;;

        file:///*) link="${link#file://}" ;;
        file://*/*)
            authority="${link#file://}"
            authority="${authority%%/*}"
            path="${link#file://"${authority}"}"
            case "$authority" in
                localhost) link="$path" ;;
                cloud) link="cloud://${path#/}" ;;
                *) link="ftp://$authority${path}" ;;
            esac ;;
        file:/*) link="${link#file:/}" ;;
    esac

    [ "$prev" = "$link" ]
}

#expand until it is no longer a path uri
until expand_path_uri; do :; done


if [ "$LINKHANDLER_EXPAND_ONLY" = 1 ]; then
    printf "%s\n" "$link"
    exit 0
fi
[ -e "${link}" ] && try_mime_handling || try_custom_uri

killall ssh-agent 2>/dev/null
