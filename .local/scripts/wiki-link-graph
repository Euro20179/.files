#!/bin/python

import os
import sys
import re
from pathlib import Path

class Graph:
    def __init__(self):
        self.edges = {}

    def add_edge(self, a: str, b: str):
        connected_to_a = self.edges.get(a, [])
        connected_to_a.append(b)
        self.edges[a] = connected_to_a

    def __str__(self):
        text = ""
        for edge in self.edges:
            text += f'''"{edge}" -> {{{", ".join(f'"{x}"' for x in self.edges[edge])}}}\n'''

        return text

start = "index.norg"

def get_link_extractor(name: str):
    if name.endswith(".md"):
        return extract_md_links
    elif name.endswith(".norg"):
        return extract_norg_links
    elif name.endswith(".mmfml"):
        return extract_mmfml_links

    return no_links

def no_links(*args):
    yield ""

def extract_norg_links(text: bytes, cwd: Path):
    text = text.decode("utf-8")
    norg_link_re = re.compile(r"\[[^\]]+\]\{:([^\}]+):\}")
    X_file_link_re = re.compile(r"\[[^\]]+\]\{/ ([^\}]+)\}")
    proto_link_re = re.compile(r"\[[^\]]+\]{([^\}]+://[^\}]+)}")
    for match in norg_link_re.findall(text):
        yield Path(f'{cwd}/{match}.norg').resolve()
    for match in X_file_link_re.findall(text):
        yield Path(match.replace("~", os.environ['HOME'])).resolve().absolute()
    for match in proto_link_re.findall(text):
        yield match

def extract_mmfml_links(text: bytes, cwd: Path):
    link_re = re.compile(r"(?<!\\)\|\s*([^\|\n]+)\s*\|")
    text = text.decode("utf-8")
    for match in link_re.findall(text):
        if re.match(r".*://.*", match):
            yield match.strip()
        elif "/" not in match and "." not in match:
            continue
        else:
            yield Path(f"{cwd}/{match.strip()}").resolve()

def extract_md_links(text: bytes, cwd: Path):
    link_re = re.compile(r"\[[^\]]+\]\(([^\)]+)\)")
    text = text.decode("utf-8")
    for match in link_re.findall(text):
        if re.match(r".*://.*", match):
            yield match
        else:
            yield Path(f'{cwd}/{match}').resolve()

def extract_links(file_path: Path):
    link_extractor = get_link_extractor(str(file_path))
    if os.path.isdir(file_path):
        dir = Path(file_path)
        for file in os.listdir(file_path):
            yield dir / file
    else:
        with open(file_path, "rb") as f:
            dir = Path(file_path.parent)
            for link in link_extractor(f.read(), dir):
                if link:
                    yield link

def traverse(start: Path):
    graph = Graph()
    stack = []
    stack.append(start)
    visited = set()
    while len(stack):
        cur = stack.pop()
        if str(cur) in visited:
            continue
        visited.add(str(cur))
        for link in extract_links(cur):
            graph.add_edge(cur, link)
            if str(link) in visited:
                continue
            if os.path.exists(link):
                stack.append(link)
    return graph

graph = traverse(Path(f"{os.environ['WIKI']}/index.mmfml"))

if len(sys.argv) > 1 and sys.argv[1] == "links":
    printed = set()
    for edge in graph.edges:
        if edge not in printed:
            print(edge)
        for node in graph.edges[edge]:
            if node not in printed:
                p = re.sub(r"^" + os.environ["WIKI"], "$WIKI", str(node))
                print(p)
            printed.add(node)
        printed.add(edge)
elif len(sys.argv) > 1 and sys.argv[1] == "plotly":
    from pyvis.network import Network
    g = Network(
        directed=True,
        select_menu=True,
        filter_menu=True,
        width = '100%',
        height = '1000',
    )
    for edge in graph.edges:
        ep = str(edge)
        ep = re.sub(r"^" + os.environ["WIKI"], "$WIKI", ep)
        g.add_node(ep, size=len(graph.edges[edge]) * 2)
        for connection in graph.edges[edge]:
            p = str(connection)
            p = re.sub(r"^" + os.environ["WIKI"], "$WIKI", p)
            g.add_node(p, size=len(graph.edges.get(connection, [1])) * 2)
            g.add_edge(ep, p)
    # g.barnes_hut(gravity=-8000, central_gravity=1.5)
    g.force_atlas_2based()
    g.show("vimwikigraph.html", notebook=False)

elif len(sys.argv) > 1 and sys.argv[1] == "NONE":
    pass
else:
    print(f"""
    digraph G {{
        fontname="Helvetica,Arial,sans-serif"
        node [fontname="Helvetica,Arial,sans-serif" color="#00FF22" fontcolor="#f8f8f8"]
        edge [fontname="Helvetica,Arial,sans-serif" color=cyan fontcolor="#f8f8f8"]
        layout=sfdp
        graph [ranksep=3, overlap=prism, bgcolor="#1e1e2e"];
        {graph}
    }}
    """)
